#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram Events Bot
"""

import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
import logfire

from events_bot.database import init_database
from events_bot.database.connection import engine
from events_bot.bot.handlers import (
    register_start_handlers,
    register_user_handlers,
    register_post_handlers,
    register_callback_handlers,
    register_moderation_handlers,
    register_feed_handlers,
)
from events_bot.bot.middleware import DatabaseMiddleware
from events_bot.database.services.post_service import PostService
from events_bot.bot.utils import get_db_session
from events_bot.storage import initialize_file_storage, set_file_storage, get_file_storage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Logfire
logfire.configure()
logfire.info("Logfire –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

async def cleanup_expired_posts_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."""
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    logfire.info("üåÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
    
    while True:
        db = None
        try:
            await asyncio.sleep(60 * 10)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            db = await get_db_session()
            expired_posts_info = await PostService.get_expired_posts_info(db)
            if not expired_posts_info:
                continue
            deleted_count = await PostService.delete_expired_posts(db)
            if deleted_count:
                logfire.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {deleted_count}")
                for post_info in expired_posts_info:
                    image_id = post_info.get("image_id")
                    if image_id:
                        try:
                            file_storage = await get_file_storage()
                            if file_storage:
                                file_storage_instance = await file_storage
                                await file_storage_instance.delete_file(image_id)
                            else:
                                logfire.error("File storage –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
                        except Exception as file_e:
                            logfire.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {image_id}: {file_e}")
        except asyncio.CancelledError:
            logfire.info("üåÄ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ—Ç–º–µ–Ω–∞).")
            break
        except Exception as e:
            if db:
                try:
                    await db.rollback()
                except Exception:
                    pass
            logfire.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}", exc_info=True)
            await asyncio.sleep(60 * 30)  # –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –ø–∞—É–∑–∞ 30 –º–∏–Ω—É—Ç
        finally:
            if db:
                try:
                    await db.close()
                except Exception:
                    pass

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logfire.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env.")
    except ImportError:
        logfire.info(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    token = os.getenv("BOT_TOKEN")
    database_url = os.getenv("DATABASE_URL")
    moderation_group_id = os.getenv("MODERATION_GROUP_ID")
    if not token or not database_url or not moderation_group_id:
        logfire.critical(
            f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN: {token}, DATABASE_URL: {database_url}, "
            f"MODERATION_GROUP_ID: {moderation_group_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
        )
        return

    logfire.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {database_url}")
    try:
        await init_database()
        logfire.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logfire.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return

    try:
        file_storage_instance = await initialize_file_storage()
        set_file_storage(file_storage_instance)
        logfire.info(f"‚úÖ File storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {type(file_storage_instance).__name__}")
    except Exception as e:
        logfire.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ file storage: {e}", exc_info=True)
        raise ValueError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ file storage: {e}")

    try:
        bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
    except Exception as e:
        logfire.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
        return

    try:
        dp.message.middleware(DatabaseMiddleware())
        dp.callback_query.middleware(DatabaseMiddleware())
        register_start_handlers(dp)
        register_user_handlers(dp)
        register_post_handlers(dp)
        register_callback_handlers(dp)
        register_moderation_handlers(dp)
        register_feed_handlers(dp)
        logfire.info("‚úÖ Middleware –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logfire.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ middleware/handlers: {e}", exc_info=True)
        return

    cleanup_task = asyncio.create_task(cleanup_expired_posts_task())
    
    logfire.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        await dp.start_polling(bot)
        logfire.info("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    except Exception as e:
        logfire.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
    finally:
        logfire.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        cleanup_task.cancel()
        await asyncio.gather(cleanup_task, return_exceptions=True)

        try:
            await engine.dispose()
            logfire.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã (engine.dispose).")
        except Exception as e:
            logfire.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î: {e}", exc_info=True)

        try:
            await bot.session.close()
            logfire.info("‚úÖ HTTP-—Å–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        except Exception as e:
            logfire.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot.session: {e}", exc_info=True)

        logfire.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logfire.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C.")